import ephem
import datetime
import math
import calendar
import zipcode
import geocoder
import requests  # Needs to be installed
import xmltodict  # Needs to be installed


zip = str(24060)
myzip = zipcode.isequal(zip)
alt = geocoder.google([myzip.lat, myzip.lon], method='elevation')

tle = ("0 TECHSAT 1B (GO-32)",
	"1 25397U 98043D   17083.85494572 -.00000014  00000-0  12820-4 0  9996",
	"2 25397  98.6023  28.0049 0000466 179.5244 180.5936 14.23617620971570")

call = 'https://graphical.weather.gov/xml/sample_products/browser_interface/ndfdXMLclient.php? \
whichClient=NDFDgenMultiZipCode&lat=&lon=&listLatLon=&lat1=&lon1=&lat2=&lon2=&resolutionSub=&listLat1=&listLon1=&listLat2=&listLon2=&resolutionList=&endPoint1Lat=&endPoint1Lon=&endPoint2Lat=&endPoint2Lon=&listEndPoint1Lat=&listEndPoint1Lon=&listEndPoint2Lat=&listEndPoint2Lon=& \
zipCodeList={zip}&listZipCodeList=&centerPointLat=&centerPointLon=&distanceLat=&distanceLon=&resolutionSquare=&listCenterPointLat=&listCenterPointLon=&listDistanceLat=&listDistanceLon=&listResolutionSquare=&citiesLevel=&listCitiesLevel=&sector=&gmlListLatLon=&featureType=&requestedTime=&startTime=&endTime=&compType=&propertyName=&product= \
time-series&begin={start}&end={end}&Unit=e&sky=sky&wx=wx&Submit=Submit'

begin = '2017-03-20T02:55:00'.replace(":", "%3A")

end = '2017-03-20T03:10:00'.replace(":", "%3A")

timestring = '%Y-%m-%dT%H:%M:00'

timedel = datetime.timedelta(minutes=15)


def getSkyCover(zipcode, startt):
    if isinstance(startt, float):
        starttime = datetime.datetime.utcfromtimestamp(startt)
       # print(starttime)
    endtime = starttime + timedel
    print("Checking for times: {} to {}".format(starttime.strftime(timestring), endtime.strftime(timestring)))
    answer = requests.get(call.format(
        zip=zipcode,
        start=starttime.strftime(timestring).replace(":", "%3A"),
        end=endtime.strftime(timestring).replace(":", "%3A"),
    ))
    xmlAnswer = xmltodict.parse(answer.text)
    parameters = xmlAnswer["dwml"]["data"]["parameters"]
    return parameters["cloud-amount"]["value"]

def seconds_between(d1, d2):
    return abs((d2 - d1).seconds)

def datetime_from_time(tr):
    year, month, day, hour, minute, second = tr.tuple()
    dt = datetime.datetime(year, month, day, hour, minute, int(second))
    return dt

def get_next_pass(lon, lat, alt, tle):

    sat = ephem.readtle(str(tle[0]), str(tle[1]), str(tle[2]))

    observer = ephem.Observer()
    observer.lat = str(lat)
    observer.long = str(lon)
    observer.elevation = alt
    observer.pressure = 0
    observer.horizon = '-0:34'

    now = datetime.datetime.utcnow()
    observer.date = now

    while 1:
        tr, azr, tt, altt, ts, azs = observer.next_pass(sat)
        #print(tr)

        duration = int((ts - tr) *60*60*24)
        rise_time = datetime_from_time(tr)
        max_time = datetime_from_time(tt)
        set_time = datetime_from_time(ts)

        observer.date = max_time

        sun = ephem.Sun()
        sun.compute(observer)
        sat.compute(observer)

        sun_alt = math.degrees(sun.alt)

        #checks for visibiliy and checks if the weather is clear
        visible = False
        if sat.eclipsed is False and -18 < math.degrees(sun_alt) < -6 :
            visible = True
        if visible:
            visibleTime = float(calendar.timegm(rise_time.timetuple()))
            print(tr)
            print("Visible: ", visible)
            ret = getSkyCover(zip, visibleTime)
            print(ret, "CLEAR" if int(ret) <= 20 else "NOT CLEAR")
            if int(ret) <= 20:
                break
        else:
            observer.date = ts

    return {
             "rise_time": calendar.timegm(rise_time.timetuple()),
             "rise_azimuth": math.degrees(azr),
             "max_time": calendar.timegm(max_time.timetuple()),
             "max_alt": math.degrees(altt),
             "set_time": calendar.timegm(set_time.timetuple()),
             "set_azimuth": math.degrees(azs),
             "elevation": sat.elevation,
             "sun_alt": sun_alt,
             "duration": duration,
             "visible": visible
           }

res = get_next_pass(myzip.lat, myzip.lon, alt.meters, tle)

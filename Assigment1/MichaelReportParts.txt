Section 1 - Objectives:
	The socket communication classes should be multi-threaded. It should be generic enough to enable usage beyond this project. The server may accept multiple clients, but must efficiently support only one.

Section 2 - Responsibilities:
	Michael Levy - Create the socket communication.
	
Section 3 - Conclusions:
	The socket communication classes were designed to be multi-threaded and allow for multiple clients to connect to a single server. To avoid repeated code, both client and server were created from a single base class. Then a decision was made for the server to let a write thread handle sending messages, while the client sent them on the main thread. Because the server handled all received messages on the main thread a queue was created to aggregate all messages received by the read threads. This caused an issue in identifying which client sent a particular message. To solve this, all messages are returned as a 2-tuple of client, message. This also means that server can simple use to received client socket to send a message back (using the server's send function which requires a client argument). In order to distinguish each message in the bytestream, a 2 byte header (0x00, 0xff) followed by 2 length bytes are used. This limits the number of bytes per message to 2^16, but can be adjusted by a single variable in the base class. The large limit allows for complex classes that are pickled to be transmitted without an issue. For debugging, a decision was made to avoid the print() function to guarantee synchronicity. Instead the logging module was used. The logging module is already synchronized, so no further code had to be written to accommodate this. The use of this module posed an issue where logging of any information below WARNING had to be enabled by the user. This is fixed by a single line added at the start of the main file.